{{define "object.redis.sync"}}
{{$obj := .}}
func (m *_{{$obj.Name}}RedisMgr) Load(db DBFetcher) error {
	if err := m.Clear(); err != nil {
		return err
	}
	{{if ne $obj.ImportSQL ""}}
	return m.AddBySQL(db, "{{$obj.ImportSQL}}")
	{{else if ne $obj.DbSource ""}}
	obj := {{$obj.Name}}Mgr.New{{$obj.Name}}()
	query := fmt.Sprintf("SELECT %s FROM `{{$obj.DbSource}}`", strings.Join(obj.GetColumns(), ","))
	return m.AddBySQL(db, query)
	{{else}}
	return fmt.Errorf("none sql for loading")
	{{end}}
}

func (m *_{{$obj.Name}}RedisMgr) AddBySQL(db DBFetcher, sql string, args ...interface{}) error {
	objs, err := db.FetchBySQL(sql, args...)
	if err != nil {
		return err
	}

	redisObjs := make([]*{{$obj.Name}}, len(objs))
	for i, obj := range objs {
		redisObjs[i] = obj.(*{{$obj.Name}})
	}

	return m.SaveBatch(redisObjs)
}
func (m *_{{$obj.Name}}RedisMgr) DelBySQL(db DBFetcher, sql string, args ...interface{}) error {
	objs, err := db.FetchBySQL(sql, args...)
	if err != nil {
		return err
	}

	for _, obj := range objs {
		if err := m.Delete(obj.(*{{$obj.Name}})); err != nil {
			return err
		}
	}
	return nil
}

{{end}}
